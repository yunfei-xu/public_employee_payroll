shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("readr")
runApp()
runApp()
runApp()
runApp()
head(ppdata)
ppdata <- read.csv(Rhode_Island.csv)
head(ppdata)
head(pp)
pp <- read_csv(Rhode_Island.csv)
pp <- read_csv("Rhode_Island.csv")
View(pp)
head(RI)
View(pp)
View(pp)
RI <- read_csv("Rhode_Island.csv")
View(RI)
View(RI)
runApp()
is.na(RI$annual)
print(c)
print(co)
co <- 0
if (is.na(RI$annual)){
print("na")
}
if (is.na(RI$annual){
if (is.na(RI$annual)){
print("na")
}
if(is.na(RI$annual)){
print("na")
}
runApp()
library(readr)
RI <- read_csv("Rhode_Island.csv")
View(RI)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("dplyr")
runApp()
install.packages("dplyr")
runApp()
runApp()
install.packages("stringr")
runApp()
runApp()
runApp()
View(RI)
View(RI)
View(RI)
View(RI)
View(RI)
View(RI)
View(RI)
View(RI)
runApp()
runApp()
runApp()
table(pp$is_job)
flag_job <- function(v){
n <- length(v)
job <- rep(FALSE, n)
for(i in 1:n){
if(str_detect(v[i],input$job)){
job[i] <- TRUE}
}
}
pp <- na.omit(pp$title)
pp$is_job <- flag_job(pp$title)
flag_job <- function(v){
n <- length(v)
job <- rep(FALSE, n)
for(i in 1:n){
if(str_detect(v[i],input$job)){
job[i] <- TRUE}
}
}
pp <- na.omit(pp$title)
pp <- data.frame(RI)
flag_job <- function(v){
n <- length(v)
job <- rep(FALSE, n)
for(i in 1:n){
if(str_detect(v[i],input$job)){
job[i] <- TRUE}
}
}
pp <- na.omit(pp$title)
pp$is_job <- flag_job(pp$title)
table(pp$is_job)
table(pp[is_job])
table(pp["is_job"])
head(pp)
View(flag_job)
View(flag_job)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(readr)
RI <- read_csv("Rhode_Island.csv")
View(RI)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
salary
salary
library(readr)
pp <- data.frame(RI)
pp_y <- filter(pp,fiscal_year=="2019")
pp_j <- filter(pp_y,title=="COORDINATOR")
salary <- na.omit(pp_j$annual)
salary
table(salary)
head(salary)
pp <- data.frame(RI)
pp
head(pp)
pp <- data.frame(RI)
head(pp)
head(pp_y)
head(pp_j)
head(pp_j)
pp_y <- filter(pp,fiscal_year=="2011")
head(pp_y)
pp_j <- filter(pp_y,title=="COORDINATOR")
head(pp_j)
salary <- na.omit(pp_j$annual)
head(salary)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
RI <- read.csv("Rhode_Island.csv")
library(shiny)
library(dplyr)
library(stringr)
library(shiny)
RI <- read.csv("Rhode_Island.csv")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
#pp <- RI[RI$title==input$job]
pp <- data.frame(RI) # select state
#flag_job <- function(v){
#  n <- length(v)
#  job <- rep(FALSE, n)
#  for(i in 1:n){
#    if(str_detect(v[i],input$job)){
#      job[i] <- TRUE}
#  }
#}
#pp <- na.omit(pp$title)
#pp$is_job <- flag_job(pp$title)
#pp <- filter(pp,is_job==TRUE)
pp_fi <- filter(pp,fiscal_year==input$year)
pp_fi <- filter(pp_fi,title==input$job)
salary <- na.omit(pp_fi$annual)  # salary data
bins <- seq(min(salary), max(salary),length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(salary, breaks = bins, col = 'skyblue', border = 'white')
})
})
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Public Empolyee Payroll Distribution"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 5,
max = 50,
value = 30),
selectInput("year",
"Select year:",
choices = sort(unique(RI$fiscal_year))),
selectInput("job",
"Select job:",
choices = unique(RI$title)),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Public Empolyee Payroll Distribution"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 5,
max = 50,
value = 30),
selectInput("year",
"Select year:",
choices = sort(unique(RI$fiscal_year))),
selectInput("job",
"Select job:",
choices = unique(RI$title)),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
shinyApp(ui, server)
shinyApp(shinyUI, shinyServer)
runApp('main.R')
runApp('main.R')
runApp()
runApp()
View(RI)
runApp()
runApp('main.R')
library(readr)
Rhode_Island <- read_csv("Rhode_Island.csv")
View(Rhode_Island)
runApp()
View(Rhode_Island)
View(Rhode_Island)
library(readr)
RI <- read_csv("Rhode_Island.csv")
View(RI)
runApp()
View(RI)
library(readr)
RI <- read_csv("Rhode_Island.csv")
View(RI)
runApp()
View(RI)
View(RI)
library(readr)
DC <- read_csv("DC.csv")
View(DC)
runApp()
library(readr)
main <- read_csv("main.csv")
View(main)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
